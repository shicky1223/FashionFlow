from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from transformers import CLIPProcessor, CLIPModel
from PIL import Image
import numpy as np
import io

app = FastAPI()

# Allow access from your frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Replace with your frontend domain for production
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load the CLIP model and processor
model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

def get_image_embedding(image, model, processor):
    inputs = processor(images=image, return_tensors="pt", padding=True)
    outputs = model.get_image_features(**inputs)
    embedding = outputs.detach().numpy()
    return embedding.tolist()  # Make JSON-serializable

@app.post("/generate-description")
async def generate_description(file: UploadFile = File(...)):
    image_bytes = await file.read()
    image = Image.open(io.BytesIO(image_bytes))
    embedding = get_image_embedding(image, model, processor)
    # We'll just return the first 5 numbers of the embedding as a "description"
    short_desc = ", ".join([f"{x:.3f}" for x in embedding[0][:5]])
    return {
        "generated_description": f"Embedding preview (first 5 values): {short_desc}"
    }
